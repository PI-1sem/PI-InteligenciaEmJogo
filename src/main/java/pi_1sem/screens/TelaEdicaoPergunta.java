/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pi_1sem.screens;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import pi_1sem.modelo.jogo.Pergunta;
import pi_1sem.modelo.jogo.Alternativa;
import pi_1sem.modelo.jogo.Materia;
import pi_1sem.modelo.jogo.PerguntaAlternativa;
import pi_1sem.modelo.participantes.Usuario;
import pi_1sem.persistencia.jogo.AlternativaDAO;
import pi_1sem.persistencia.jogo.MateriaDAO;
import pi_1sem.persistencia.jogo.PerguntaAlternativaDAO;
import pi_1sem.persistencia.jogo.PerguntaDAO;
import pi_1sem.persistencia.usuarios.UsuarioDAO;

/**
 *
 * @author charl
 */
public class TelaEdicaoPergunta extends javax.swing.JFrame {
    private String filtroAtual = "Todas";
    /**
     * Creates new form EditarPergunta
     */
    public TelaEdicaoPergunta() {
        initComponents();
        listarPerguntas(this.filtroAtual);
        capturarAltercoes();
        setLocationRelativeTo(null);
        setSize(1277,653);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        todasPerguntasTable = new javax.swing.JTable();
        excluirButton = new javax.swing.JButton();
        adcionarPerguntaButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        voltarButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        todasPerguntasTable.setShowGrid(true);
        todasPerguntasTable.setGridColor(java.awt.Color.GRAY);
        todasPerguntasTable.setRowHeight(30);
        todasPerguntasTable.setBackground(new java.awt.Color(204, 204, 204));
        todasPerguntasTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        todasPerguntasTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Pergunta", 
                "Enunciado", 
                "Materia ▼", 
                "Dificuldade", 
                "Opção A", 
                "Opção B", 
                "Opção C", 
                "Opção D", 
                "Alternativa Correta",
                "ID Alternaativa A",
                "ID Alternaativa B",
                "ID Alternaativa C",
                "ID Alternaativa D",
                "ID Alternaativa Correta"
            }
        ){
            @Override
            public boolean isCellEditable(int row, int column) {
                return column != 0 && column < 9 && column!=2;
            }
        });
        for (int i = 1; i < todasPerguntasTable.getColumnCount(); i++) {
            javax.swing.table.TableColumn column = todasPerguntasTable.getColumnModel().getColumn(i);
            if (column.getCellEditor() instanceof javax.swing.DefaultCellEditor) {
                ((javax.swing.DefaultCellEditor) column.getCellEditor()).setClickCountToStart(2);
            }
        }
        jScrollPane1.setViewportView(todasPerguntasTable);
        todasPerguntasTable.setComponentPopupMenu(criaMateriaPopup());
        JTableHeader header = todasPerguntasTable.getTableHeader();
        header.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Converter o ponto de clique para o sistema de coordenadas do cabeçalho
                Point point = e.getPoint();
                int colIndex = header.columnAtPoint(point);
                
                if (colIndex >= 0) {
                    String columnName = todasPerguntasTable.getColumnName(colIndex);
                    
                    if ("Materia ▼".equals(columnName)) { // Verifique o nome exato da coluna
                        showFilterDialog();
                    }
                }
            }
        });

        excluirButton.setBackground(new java.awt.Color(255, 51, 51));
        excluirButton.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        excluirButton.setForeground(new java.awt.Color(255, 255, 255));
        excluirButton.setText("Excluir ");
        excluirButton.setBorder(null);
        excluirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirButtonActionPerformed(evt);
            }
        });

        adcionarPerguntaButton.setBackground(new java.awt.Color(0, 102, 255));
        adcionarPerguntaButton.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        adcionarPerguntaButton.setForeground(new java.awt.Color(255, 255, 255));
        adcionarPerguntaButton.setText("Adicionar Pergunta");
        adcionarPerguntaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adcionarPerguntaButtonActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 102, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("POLIEDRO");

        jLabel3.setIcon(new javax.swing.ImageIcon("src//main//java//pi_1sem//images//pessoa_icone.png")); // NOI18N

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Nome: "+ retornaNome());

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Id: "+ Usuario.usuarioLogado.getId());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 740, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(14, 14, 14))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 24)); // NOI18N
        jLabel2.setText("Editar Pergunta");

        voltarButton.setBackground(new java.awt.Color(146, 198, 243));
        voltarButton.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 18)); // NOI18N
        voltarButton.setForeground(new java.awt.Color(51, 51, 51));
        voltarButton.setText("Voltar");
        voltarButton.setBorder(null);
        voltarButton.setFocusPainted(false);
        voltarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(voltarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(excluirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(adcionarPerguntaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(15, 15, 15))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jLabel2)
                .addGap(45, 45, 45)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adcionarPerguntaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(excluirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(voltarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void adcionarPerguntaButtonActionPerformed(java.awt.event.ActionEvent evt) {
        new TelaAdcionarPergunta().setVisible(true);
        this.dispose();
    }

    private void voltarButtonActionPerformed(java.awt.event.ActionEvent evt) {
        new TelaOpcoesEditar().setVisible(true);
        this.dispose();
    }

     public void excluirButtonActionPerformed(java.awt.event.ActionEvent evt) {
        var resposta= JOptionPane.showConfirmDialog(null, "Deseja excluir a pergunta e suas alternativas?", "Tem certeza disso?", JOptionPane.OK_CANCEL_OPTION);

        if(resposta == JOptionPane.OK_OPTION){
            try{
                var perguntaDao = new PerguntaDAO();
                var alternativaDao = new AlternativaDAO();
    
                var idPergunta= pegarCampoId();
                perguntaDao.excluirPergunta(idPergunta);

                List<Integer> idsAlternativa = Arrays.asList(pegarCampoIdAlternativa('A'), pegarCampoIdAlternativa('B'), pegarCampoIdAlternativa('C'), pegarCampoIdAlternativa('D'));

                alternativaDao.excluirAlternativas(idsAlternativa);
    
                listarPerguntas(filtroAtual);
    
                JOptionPane.showMessageDialog(null, "Pergunta e alternativas excluida com sucesso");
            }
            catch (Exception e){
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Erro ao excluir pergunta e altenrativas");
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaEdicaoPergunta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaEdicaoPergunta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaEdicaoPergunta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaEdicaoPergunta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaEdicaoPergunta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adcionarPerguntaButton;
    private javax.swing.JTable todasPerguntasTable;
    private javax.swing.JButton excluirButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton voltarButton;
    // End of variables declaration//GEN-END:variables
    private String retornaNome(){
        try {
            var usuarioDao= new UsuarioDAO();
            var usuarioNome= usuarioDao.pegarNome();

            return usuarioNome;
        } 
        catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao retornat nome de usuario");
            return null;
        }
    }
    private Integer pegarCampoIdAlternativa(char letra){
        int col=0;
        switch (letra) {
            case 'A' -> col=9;
                
            case 'B' -> col=10;

            case 'C' -> col=11;

            case 'D'-> col=12;
        }
        int linhaSelecionada = todasPerguntasTable.getSelectedRow();
        var idAlternativa=(int) todasPerguntasTable.getModel().getValueAt(linhaSelecionada, col);

        return idAlternativa;
    }
    private Integer pegarCampoId(){
        int linhaSelecionada = todasPerguntasTable.getSelectedRow();   
        int idSelecionado= Integer.parseInt(todasPerguntasTable.getModel().getValueAt(linhaSelecionada, 0).toString());

        return idSelecionado;
    }
    private void listarPerguntas(String filtroMateria) {
        if (filtroMateria.equals("Todas")){
            try{
                var perguntaAlternativadao= new PerguntaAlternativaDAO();
                var perguntas= perguntaAlternativadao.listarPerguntasAlternativas();
                listarBasico(perguntas);
            }
            catch(Exception e){
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Erro ao listar as perguntas");
            }
        }
        else{
            try{
                var perguntaAlternativadao= new PerguntaAlternativaDAO();
                var perguntas= perguntaAlternativadao.listarPerguntasAlternativasExpecificas(filtroMateria);
                this.filtroAtual= filtroMateria;
                listarBasico(perguntas);
            }
            catch(Exception e){
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Erro ao listar as perguntas");
            }
        }
    }
    private void listarBasico (List<PerguntaAlternativa> perguntas){
        DefaultTableModel model = (DefaultTableModel) todasPerguntasTable.getModel();
        model.setRowCount(0);

        String alternativaCorreta= "";
        int idAltCorreta= 0;

        for(int i = 0; i < perguntas.size(); i += 4){
            var id= perguntas.get(i).getPergunta().getId();
            var enunciado= perguntas.get(i).getPergunta().getEnunciado();
            var materia= perguntas.get(i).getPergunta().getMateria().getNome();
            var nivel= perguntas.get(i).getPergunta().getNivel();
            var alternativaA = perguntas.get(i).getAlternativa().getTexto();
            var alternativaB = perguntas.get(i+1).getAlternativa().getTexto();
            var alternativaC = perguntas.get(i+2).getAlternativa().getTexto();
            var alternativaD = perguntas.get(i+3).getAlternativa().getTexto();

            var idAltA = perguntas.get(i).getAlternativa().getId();
            var idAltB = perguntas.get(i+1).getAlternativa().getId();
            var idAltC = perguntas.get(i+2).getAlternativa().getId();
            var idAltD = perguntas.get(i+3).getAlternativa().getId();

            for(int j = i; j < (i+4); j++){
                if(perguntas.get(j).isCorreta() == true){
                    alternativaCorreta = perguntas.get(j).getAlternativa().getLetra();
                    idAltCorreta = perguntas.get(j).getAlternativa().getId();
                }
            }
            model.addRow(new Object[]{
                id, 
                enunciado, 
                materia, 
                nivel, 
                alternativaA, 
                alternativaB, 
                alternativaC, 
                alternativaD, 
                alternativaCorreta,
                idAltA,
                idAltB,
                idAltC,
                idAltD,
                idAltCorreta

            });
        }
        if(todasPerguntasTable.getColumnCount() > 9){
            ocultarColunasIds();
        }
    }
    private JPopupMenu criaMateriaPopup() {
        var popupMenu = new JPopupMenu();
        var filterMenuItem = new JMenuItem("Filtrar por Matéria");
        filterMenuItem.addActionListener(e -> showFilterDialog());
        popupMenu.add(filterMenuItem);
        return popupMenu;
    }
    private void showFilterDialog() {
        JDialog filterDialog = new JDialog(this, "Filtrar Matérias", true);
        filterDialog.setLayout(new BorderLayout());
        
        // Painel principal
        JPanel panel = new JPanel(new GridLayout(3, 1, 5, 5));
        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        // Combo box de matérias
        JLabel label = new JLabel("Selecione a matéria:");
        JComboBox<String> materiasComboBox = new JComboBox<>();
        materiasComboBox.addItem("Todas");
        
        try {
            var materiaDao= new MateriaDAO();
            var materias= materiaDao.listarMaterias();
            for (Materia materia : materias) {
                materiasComboBox.addItem(materia.getNome());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        // Botões
        JButton applyButton = new JButton("Aplicar Filtro");
        applyButton.addActionListener(e -> {
            listarPerguntas((String) materiasComboBox.getSelectedItem());
            filterDialog.dispose();
        });
        
        JButton cancelButton = new JButton("Cancelar");
        cancelButton.addActionListener(e -> filterDialog.dispose());
        
        // Adicionar componentes
        panel.add(label);
        panel.add(materiasComboBox);
        
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.add(cancelButton);
        buttonPanel.add(applyButton);
        
        filterDialog.add(panel, BorderLayout.CENTER);
        filterDialog.add(buttonPanel, BorderLayout.SOUTH);
        
        filterDialog.pack();
        filterDialog.setLocationRelativeTo(this);
        filterDialog.setVisible(true);
    }
    private void capturarAltercoes(){
        var model = (DefaultTableModel) todasPerguntasTable.getModel();

        model.removeTableModelListener(this::handleTableUpdate);
        model.addTableModelListener(this::handleTableUpdate);
    }
    private void handleTableUpdate(TableModelEvent e) {
        if (e.getType() != TableModelEvent.UPDATE || e.getColumn() < 1) return;
        
        int row = e.getFirstRow();
        int col = e.getColumn();
        
        if (row < 0 || row >= todasPerguntasTable.getRowCount()) return;
    
        var valorAlterado = todasPerguntasTable.getModel().getValueAt(row, col).toString();
        if(valorAlterado.equals("")){
            JOptionPane.showMessageDialog(null, "Não é possível alterar para um campo vazio");
            return;
        }

        var idPergunta= pegarCampoId();

        if (col == 1){
            var enunciado = valorAlterado;
            try{
                var perguntadao = new PerguntaDAO();
                perguntadao.editarPergunta(enunciado, idPergunta);
                JOptionPane.showMessageDialog(null, "Enunciado alterado com sucesso");
            }
            catch(Exception ex){
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Erro ao editar a pergunta");
            }
        }
        if (col== 3){
            var dificuldade = valorAlterado.toLowerCase();
            if (dificuldade.equals("fácil") || dificuldade.equals("médio") || dificuldade.equals("difícil")){
                try{
                    var perguntadao = new PerguntaDAO();
                    perguntadao.editarDificuldade(dificuldade, idPergunta);
                    JOptionPane.showMessageDialog(null, "Dificuldade alterada com sucesso");
                }
                catch(Exception ex){
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Erro ao editar a dificuldade");
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "ERRO! inclua uma dificuldade válida e/ou cheque os acentos");
            }
        }

        // Altera todas as colunas de alternativa menos a alternativa correta
        if (col >= 4 && col <= 7) {
            var altIndex= col - 4;

            int posAltCol = 9 + altIndex; // Colunas 9,10,11,12 correspondem as alternativas
            int idAlternativa = (int) todasPerguntasTable.getModel().getValueAt(row, posAltCol);

            try{
                var alternativa= new Alternativa(idAlternativa, valorAlterado);
                var alternativadao = new AlternativaDAO();
                alternativadao.editarAlternativa(alternativa, idPergunta);

                JOptionPane.showMessageDialog(null, "A altenativa foi alterada com sucesso");            
            }
            catch(Exception ex){
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Erro ao editar alternativa");
            }
        }

        //Altera a alternativa correta
        if (col == 8 ) {
            var valorAlteradoMaiusculo=valorAlterado.toUpperCase();

            if (valorAlteradoMaiusculo.equals("A") || valorAlteradoMaiusculo.equals("B") || valorAlteradoMaiusculo.equals("C") || valorAlteradoMaiusculo.equals("D")) {
                int idNovaAlternativaCorreta=0;
                if(valorAlteradoMaiusculo.equals("A")){
                    idNovaAlternativaCorreta = (int) todasPerguntasTable.getModel().getValueAt(row, 9);
                }
                else if(valorAlteradoMaiusculo.equals("B")){
                    idNovaAlternativaCorreta = (int) todasPerguntasTable.getModel().getValueAt(row, 10);
                }
                else if(valorAlteradoMaiusculo.equals("C")){
                    idNovaAlternativaCorreta = (int) todasPerguntasTable.getModel().getValueAt(row, 11);
                }
                else if(valorAlteradoMaiusculo.equals("D")){
                    idNovaAlternativaCorreta = (int) todasPerguntasTable.getModel().getValueAt(row, 12);
                }

                int idAntigaAlternativaCorreta = (int) todasPerguntasTable.getModel().getValueAt(row, 13);
    
                try{
                    var perguntaAlternativaDAO = new PerguntaAlternativaDAO();
                    perguntaAlternativaDAO.removerAlternativaCorreta(idPergunta, idAntigaAlternativaCorreta);
                    perguntaAlternativaDAO.adicionarAlternativaCorreta(idPergunta, idNovaAlternativaCorreta);
                    
                    listarPerguntas(filtroAtual);
                   

                    JOptionPane.showMessageDialog(null, "a alternativa correta foi alterada com sucesso");
                }
                catch(Exception ex){
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Erro ao editar alternativa correta");
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "ERRO!!! Adicione como alternativa correta algum valor que esteja no intervalo de A até D");
            }
        }
    }
    private void ocultarColunasIds() {
        todasPerguntasTable.removeColumn(todasPerguntasTable.getColumnModel().getColumn(13)); // ID Pergunta
        todasPerguntasTable.removeColumn(todasPerguntasTable.getColumnModel().getColumn(12)); // ID Alt D
        todasPerguntasTable.removeColumn(todasPerguntasTable.getColumnModel().getColumn(11)); // ID Alt C
        todasPerguntasTable.removeColumn(todasPerguntasTable.getColumnModel().getColumn(10)); // ID Alt B
        todasPerguntasTable.removeColumn(todasPerguntasTable.getColumnModel().getColumn(9)); // ID Alt A
    }
}
