package pi_1sem.screens;


import java.util.List;

import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;

import pi_1sem.modelo.jogo.Partida;
import pi_1sem.persistencia.jogo.PerguntaDAO;
import pi_1sem.persistencia.usuarios.UsuarioDAO;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author charl
 */
public class TelaJogo extends javax.swing.JFrame {

    /**
     * Creates new form Perguntas1_2
     */
    public TelaJogo(Partida partida) {
        List<String> base= perguntaSelecionada(partida);
        setarPontuacao(partida);
        initComponents(base, partida);
        pararButton.setEnabled(partida.getPosicao() >= 2);
        dicaButton.setEnabled(partida.getOpcoesDicas() != null);
        setLocationRelativeTo(null);
        setSize(1277,653);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents(List<String>base, Partida partida) {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        dicaButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        pararButton = new javax.swing.JButton();
        enviarButton = new javax.swing.JButton();
        alternativaCToggleButton = new javax.swing.JToggleButton();
        alternativaAToggleButton = new javax.swing.JToggleButton();
        alternativaBToggleButton = new javax.swing.JToggleButton();
        alternativaDToggleButton = new javax.swing.JToggleButton();
        perguntaScrollPane = new javax.swing.JScrollPane();
        perguntaTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(64, 133, 224));

        dicaButton.setIcon(new javax.swing.ImageIcon("src//main//java//pi_1sem//images//lampada 1.6.png")); // NOI18N
        dicaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dicaButtonActionPerformed(evt, base, partida);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon("src//main//java//pi_1sem//images//imagem do poliedro 1.3.png")); // NOI18N

        pararButton.setBackground(new java.awt.Color(255, 51, 51));
        pararButton.setFont(new java.awt.Font("Arial", 2, 18)); // NOI18N
        pararButton.setText("Parar");
        pararButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pararButtonActionPerformed(evt, partida);
            }
        });

        enviarButton.setBackground(new java.awt.Color(51, 204, 0));
        enviarButton.setFont(new java.awt.Font("Arial", 2, 18)); // NOI18N
        enviarButton.setText("Enviar");
        enviarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarButtonActionPerformed(evt, base, partida);
            }
        });

        alternativaCToggleButton.setBackground(new java.awt.Color(64, 133, 224));
        buttonGroup1.add(alternativaCToggleButton);
        alternativaCToggleButton.setFont(new java.awt.Font("Franklin Gothic Medium", 2, 18)); // NOI18N
        alternativaCToggleButton.setForeground(new java.awt.Color(255, 255, 255));
        alternativaCToggleButton.setText(base.get(3));

        alternativaAToggleButton.setBackground(new java.awt.Color(64, 133, 224));
        buttonGroup1.add(alternativaAToggleButton);
        alternativaAToggleButton.setFont(new java.awt.Font("Franklin Gothic Medium", 2, 18)); // NOI18N
        alternativaAToggleButton.setForeground(new java.awt.Color(255, 255, 255));
        alternativaAToggleButton.setText(base.get(1));

        alternativaBToggleButton.setBackground(new java.awt.Color(64, 133, 224));
        buttonGroup1.add(alternativaBToggleButton);
        alternativaBToggleButton.setFont(new java.awt.Font("Franklin Gothic Medium", 2, 18)); // NOI18N
        alternativaBToggleButton.setForeground(new java.awt.Color(255, 255, 255));
        alternativaBToggleButton.setText(base.get(2));

        alternativaDToggleButton.setBackground(new java.awt.Color(64, 133, 224));
        buttonGroup1.add(alternativaDToggleButton);
        alternativaDToggleButton.setFont(new java.awt.Font("Franklin Gothic Medium", 2, 18)); // NOI18N
        alternativaDToggleButton.setForeground(new java.awt.Color(255, 255, 255));
        alternativaDToggleButton.setText(base.get(4));

        perguntaTextArea.setBackground(new java.awt.Color(64, 133, 224));
        perguntaTextArea.setColumns(20);
        perguntaTextArea.setFont(new java.awt.Font("Franklin Gothic Medium", 2, 24)); // NOI18N
        perguntaTextArea.setForeground(new java.awt.Color(255, 255, 255));
        perguntaTextArea.setLineWrap(true);
        perguntaTextArea.setRows(4);
        perguntaTextArea.setText(base.get(0));
        perguntaTextArea.setBorder(null);
        perguntaScrollPane.setViewportView(perguntaTextArea);
        perguntaScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        perguntaScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        perguntaScrollPane.setBorder(null);
        

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(dicaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(pararButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(enviarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(alternativaBToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alternativaAToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 478, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(alternativaDToggleButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alternativaCToggleButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(183, 183, 183))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(246, 246, 246)
                .addComponent(perguntaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 739, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dicaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 472, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enviarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pararButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(perguntaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alternativaCToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alternativaAToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alternativaBToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alternativaDToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(122, 122, 122))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pararButtonActionPerformed(java.awt.event.ActionEvent evt, Partida partida) {
        var parar= JOptionPane.showConfirmDialog(null, "Deseja parar na pergunta " + partida.getPosicao() + "?" + "\nVocê sairá com o dinheiro da ultima rodada R$" + partida.getPontuacaoUltimaRodada(), "Tem certeza que deseja parar? ", JOptionPane.OK_CANCEL_OPTION);

        if(JOptionPane.OK_OPTION == parar){
            try{
                var usuarioDao= new UsuarioDAO();
    
                var pontuacaoDoBanco= usuarioDao.pegarPontuacao();

                if (partida.getPontuacaoSeguro() != 0){
                    var pontuacaoNova=  pontuacaoDoBanco + (partida.getPontuacaoUltimaRodada() - partida.getPontuacaoSeguro());
        
                    usuarioDao.atualizarPontuacao(pontuacaoNova);
                }
                else{
                    var pontuacaoNova=  pontuacaoDoBanco + partida.getPontuacaoUltimaRodada();

                    usuarioDao.atualizarPontuacao(pontuacaoNova);
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Erro ao atualizar pontuação");
                e.printStackTrace();
            }
            new TelaFinalizacao(partida, "parou").setVisible(true);
            this.dispose();   
        }
    }

    private void dicaButtonActionPerformed(java.awt.event.ActionEvent evt, List<String> base, Partida partida){
        var opcoesDica= partida.getOpcoesDicas();

        int escolha = JOptionPane.showOptionDialog(
        this, 
        "Escolha o tipo de dica que deseja usar:", 
        "Tipos de Dica", 
        JOptionPane.DEFAULT_OPTION, 
        JOptionPane.QUESTION_MESSAGE, 
        null, 
        opcoesDica,
        null
        );
        if (escolha == -1) {
            return;
        }
        if (opcoesDica[escolha].equals("Pular pergunta")){
            if (partida.getOpcoesDicas().length == 2){
                partida.setOpcoesDicas(new Object[]{"Eliminação por sorte"});
            }
            else if (partida.getOpcoesDicas().length == 1){
                partida.setOpcoesDicas(null);
            }
            JOptionPane.showMessageDialog(this, "Você pulou a pergunta!");

            proximaPergunta(partida);
            
        }

        if (opcoesDica[escolha].equals("Eliminação por sorte")){
            if (partida.getOpcoesDicas().length == 2){
                partida.setOpcoesDicas(new Object[]{"Pular pergunta"});
            }
            else if (partida.getOpcoesDicas().length == 1){
                partida.setOpcoesDicas(null);
            }
            // 1. Obter a resposta correta
            String respostaCorreta = base.get(5);
            
            // 2. Lista de todas as alternativas erradas e visíveis
            List<JToggleButton> alternativasErradas = new ArrayList<>();
            
            // Verificar cada botão
            JToggleButton[] todosBotoes = {
                alternativaAToggleButton, 
                alternativaBToggleButton, 
                alternativaCToggleButton, 
                alternativaDToggleButton
            };
            
            for (JToggleButton botao : todosBotoes) {
                if (!botao.getText().equals(respostaCorreta)) {
                    alternativasErradas.add(botao);
                }
            }
            
            // 3. Sortear quantas alternativas serão removidas (0-3)
            int numeroParaRemover = (int) (Math.random() * 4); // Gera 0, 1, 2 ou 3
            
            // 4. Embaralhar a lista de alternativas erradas
            Collections.shuffle(alternativasErradas);
            
            // 5. Remover as alternativas selecionadas
            for (int i = 0; i < numeroParaRemover && i < alternativasErradas.size(); i++) {
                alternativasErradas.get(i).setVisible(false);
            }
            
            // 6. Atualizar a interface
            revalidate();
            repaint();
            
            // 7. Feedback para o usuário
            String mensagem;
            switch (numeroParaRemover) {
                case 0:
                    mensagem = "A dica não removeu nenhuma alternativa errada. Boa sorte!";
                    break;
                case 1:
                    mensagem = "Dica usada! 1 opção errada foi removida.";
                    break;
                default:
                    mensagem = "Dica usada! " + numeroParaRemover + " opções erradas foram removidas.";
                    break;
            }
            
            JOptionPane.showMessageDialog(this, 
                mensagem,
                "Dica", 
                JOptionPane.INFORMATION_MESSAGE);
    
            dicaButton.setEnabled(false);

        }

    }

    private void enviarButtonActionPerformed(java.awt.event.ActionEvent evt, List<String> base, Partida partida) {
        JToggleButton respostaSelecionada = null;
        

        JToggleButton[] todasRespostas = {
            alternativaAToggleButton, 
            alternativaBToggleButton, 
            alternativaCToggleButton, 
            alternativaDToggleButton
        };
        
        // Procura qual está selecionada
        for (JToggleButton resposta : todasRespostas) {
            if (resposta.isSelected()) {
                respostaSelecionada = resposta;
                break;
            }
        }
        
        // 2. Verifica se alguma resposta foi selecionada
        if (respostaSelecionada == null) {
            JOptionPane.showMessageDialog(this, 
                "Selecione uma resposta antes de enviar!", 
                "Aviso", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(respostaSelecionada !=  null) {
            var analise= JOptionPane.showConfirmDialog(null, respostaSelecionada.getText() + " é a sua resposta final?\nSe acertar você receberá R$" + partida.getPontuacaoPartida(), "Tem certeza da sua resposta? ", JOptionPane.OK_CANCEL_OPTION);

            if(JOptionPane.OK_OPTION == analise) {
                // 3. Define qual é a resposta correta (ajuste para o seu caso)
                String respostaCorreta = base.get(5);
                
                // 4. Verifica se acertou
                boolean acertou = respostaSelecionada.getText().equals(respostaCorreta);

                JToggleButton respostaCorretaButton = null;
                for (JToggleButton btn : todasRespostas) {
                    if (btn.getText().equals(respostaCorreta)) {
                        respostaCorretaButton = btn;
                        break;
                    }
                }
                
                // 5. Mostra o feedback visual
                if (acertou) {
                    respostaSelecionada.setBackground(new java.awt.Color(35, 177, 67));
                    JOptionPane.showMessageDialog(this, 
                        "✅ Resposta Correta!", 
                        "Parabéns", 
                        JOptionPane.INFORMATION_MESSAGE);

                    proximaPergunta(partida);

                } 
                else {
                    respostaSelecionada.setBackground(new java.awt.Color(255, 51, 51));
                    if(respostaCorretaButton != null){
                        respostaCorretaButton.setBackground(new java.awt.Color(35, 177, 70));
                    }
                    JOptionPane.showMessageDialog(this, 
                        "❌ Resposta Incorreta!\nA resposta correta é: " + respostaCorretaButton.getText(), 
                        "Resultado", 
                        JOptionPane.ERROR_MESSAGE);

                    new TelaFinalizacao(partida, "errou").setVisible(true);
                    this.dispose();
                }
            }
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dicaButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JButton enviarButton;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane perguntaScrollPane;
    private javax.swing.JTextArea perguntaTextArea;
    private javax.swing.JToggleButton alternativaAToggleButton;
    private javax.swing.JToggleButton alternativaBToggleButton;
    private javax.swing.JToggleButton alternativaCToggleButton;
    private javax.swing.JToggleButton alternativaDToggleButton;
    private javax.swing.JButton pararButton;
    // End of variables declaration//GEN-END:variables
    private List<String> perguntaSelecionada(Partida partida) {
        String nivel;
        var questao= new ArrayList<String>();
        if (partida.getPosicao() <= 4){
            nivel = "fácil";
        }
        else if (partida.getPosicao() <= 8){
            nivel = "médio";
            if(partida.getPosicao() == 5){
                partida.getPerguntasSorteadas().clear();
            }
            
        }
        else if (partida.getPosicao() <= 12){
            nivel = "difícil";
            if(partida.getPosicao() == 9){
                partida.getPerguntasSorteadas().clear();
            }
        }
        else{
            nivel = null;
        }
        try{
            var perguntaDao = new PerguntaDAO();
            var banco= perguntaDao.bancoDeQuestoes(nivel, partida.getMateria());
    
            var tamanho= banco.size();
            int indexSorteado;
            do{
                int k= (int) (Math.random() * (tamanho/4));
                indexSorteado= 4 * k;
                if (!partida.getPerguntasSorteadas().contains(indexSorteado)){
                    partida.getPerguntasSorteadas().add(indexSorteado);

                    questao.add(banco.get(indexSorteado).getPergunta().getEnunciado());
                    questao.add(banco.get(indexSorteado).getAlternativa().getTexto());
                    questao.add(banco.get((indexSorteado+ 1)).getAlternativa().getTexto());
                    questao.add(banco.get((indexSorteado+ 2)).getAlternativa().getTexto());
                    questao.add(banco.get((indexSorteado+ 3)).getAlternativa().getTexto());
                    for(int j = indexSorteado; j < (indexSorteado+4); j++){
                        if(banco.get(j).isCorreta() == true){
                            questao.add(banco.get(j).getAlternativa().getTexto());
                        }
                    }
                    break;
                }
            } while(true);

            return questao;
        }
        catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao selecionar a pergunta");
            return null;
        }
    }
    private void setarPontuacao(Partida partida){
        var posicao= partida.getPosicao();

        switch (posicao) {
            case 1 -> partida.setPontuacaoPartida(500);
                
            case 2 -> partida.setPontuacaoPartida(1000);

            case 3 -> partida.setPontuacaoPartida(2500);

            case 4 -> partida.setPontuacaoPartida(5000);

            case 5 -> partida.setPontuacaoPartida(10000);

            case 6 -> partida.setPontuacaoPartida(25000);

            case 7 -> partida.setPontuacaoPartida(50000);

            case 8 -> partida.setPontuacaoPartida(100000);

            case 9 -> partida.setPontuacaoPartida(250000);

            case 10 -> partida.setPontuacaoPartida(500000);

            case 11 -> partida.setPontuacaoPartida(750000);

            case 12 -> partida.setPontuacaoPartida(1000000);
        
            default -> JOptionPane.showMessageDialog(null, "Posição inválida");
                
        }
    }
    private void proximaPergunta(Partida partida){
        var posicaoAtual= partida.getPosicao();

        if(posicaoAtual== 4 || posicaoAtual == 8 || posicaoAtual == 12) {
            try{
                var usuarioDao= new UsuarioDAO();

                var pontuacaoDoBanco= usuarioDao.pegarPontuacao();
                
                if (partida.getPontuacaoSeguro() != 0){
                    var pontuacaoNova=  pontuacaoDoBanco + (partida.getPontuacaoPartida() - partida.getPontuacaoSeguro());

                    usuarioDao.atualizarPontuacao(pontuacaoNova);
                    
                }
                else{
                    var pontuacaoNova=  pontuacaoDoBanco + partida.getPontuacaoPartida();

                    usuarioDao.atualizarPontuacao(pontuacaoNova);
                }

                partida.setPontuacaoSeguro(partida.getPontuacaoPartida());

                partida.setPontuacaoUltimaRodada(partida.getPontuacaoPartida());

                var posicaoNova= posicaoAtual + 1;
                partida.setPosicao(posicaoNova);

                if (posicaoAtual == 4 || posicaoAtual == 8){
                    new TelaCheckPoint(partida).setVisible(true);
                    this.dispose();
                }
                else if(posicaoAtual == 12){
                    new TelaQuizCompleto(partida).setVisible(true);
                    this.dispose();
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Erro ao atualizar pontuação");
                e.printStackTrace();

            }
        }
        else{
            partida.setPontuacaoUltimaRodada(partida.getPontuacaoPartida());

            var posicaoNova= posicaoAtual + 1;

            partida.setPosicao(posicaoNova);

            new TelaJogo(partida).setVisible(true);
            this.dispose();
        }
    }
}
